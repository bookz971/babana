// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6f2tCFSxu7LWocYppemXKJ
// Component: cRO8sw2Khc3hba
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Logo from "../../Logo"; // plasmic-import: fjZllbqH8938Gp/component
import Button from "../../Button"; // plasmic-import: 2I7YqT3nVeJxiy/component
import { useScreenVariants as useScreenVariantszhUTeOnflctJrc } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: zhUTeONFLCTJrc/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_light_saa_s_landing_page.module.css"; // plasmic-import: 6f2tCFSxu7LWocYppemXKJ/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: cRO8sw2Khc3hba/css

export const PlasmicNavbar__VariantProps = new Array();

export const PlasmicNavbar__ArgProps = new Array();

function PlasmicNavbar__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantszhUTeOnflctJrc()
  });
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__q3IM)}
      >
        {true ? (
          <Logo
            data-plasmic-name={"logo"}
            data-plasmic-override={overrides.logo}
            className={classNames("__wab_instance", sty.logo)}
            largeLogo={
              hasVariant(globalVariants, "screen", "mobile") ? undefined : true
            }
          />
        ) : null}
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__j6ZJi)}
          >
            <Button
              className={classNames("__wab_instance", sty.button__ePtrp)}
              color={"navLink"}
              endIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__hlDs)}
                  role={"img"}
                />
              }
              link={"#"}
              startIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__ljto)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ovkig
                )}
              >
                {"How it Work"}
              </div>
            </Button>

            <Button
              className={classNames("__wab_instance", sty.button__bmtIf)}
              color={"navLink"}
              endIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg___0Jp4S)}
                  role={"img"}
                />
              }
              link={"#"}
              startIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__ghOji)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__klEKx
                )}
              >
                {"Pricing"}
              </div>
            </Button>

            <Button
              className={classNames("__wab_instance", sty.button__oOjZh)}
              color={"navLink"}
              endIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__qiiFi)}
                  role={"img"}
                />
              }
              link={"#"}
              startIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__xhoDe)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___6WAn
                )}
              >
                {"FAQs"}
              </div>
            </Button>
          </p.Stack>
        ) : null}
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__jNxt)}
          >
            {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
              <Button
                className={classNames("__wab_instance", sty.button___7Bj33)}
                color={"navLink"}
                endIcon={
                  <svg
                    className={classNames(projectcss.all, sty.svg___7Qcc)}
                    role={"img"}
                  />
                }
                link={"#"}
                startIcon={
                  <svg
                    className={classNames(projectcss.all, sty.svg__nA1Iv)}
                    role={"img"}
                  />
                }
              >
                {"Log in"}
              </Button>
            ) : null}

            <Button
              className={classNames("__wab_instance", sty.button___1TazH)}
              color={"navLinkBlue"}
              endIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__e6Sk8)}
                  role={"img"}
                />
              }
              link={"#"}
              startIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__jYbx2)}
                  role={"img"}
                />
              }
            >
              {hasVariant(globalVariants, "screen", "mobile")
                ? "Watch Demo"
                : "Watch Demo"}
            </Button>
          </p.Stack>
        ) : null}
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "logo"],
  logo: ["logo"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNavbar__ArgProps,
          internalVariantPropNames: PlasmicNavbar__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logo: makeNodeComponent("logo"),
    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
